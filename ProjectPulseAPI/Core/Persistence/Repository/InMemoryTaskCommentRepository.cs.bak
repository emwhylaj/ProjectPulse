using ProjectPulseAPI.Application.Services;
using ProjectPulseAPI.Core.Entities;
using ProjectPulseAPI.Core.Persistence.GenericRepo;

namespace ProjectPulseAPI.Core.Persistence.Repository
{
    public class InMemoryTaskCommentRepository : InMemoryBaseRepository<TaskComment>, ITaskCommentRepository
    {
        protected override IEnumerable<TaskComment> GetAllEntities()
        {
            return InMemoryDataService.GetTaskComments();
        }

        protected override TaskComment? GetEntityById(int id)
        {
            return InMemoryDataService.GetTaskComment(id);
        }

        protected override TaskComment AddEntity(TaskComment entity)
        {
            return InMemoryDataService.AddTaskComment(entity);
        }

        protected override TaskComment? UpdateEntity(TaskComment entity)
        {
            return InMemoryDataService.UpdateTaskComment(entity);
        }

        protected override bool DeleteEntityById(int id)
        {
            var taskComment = InMemoryDataService.GetTaskComment(id);
            if (taskComment != null)
            {
                taskComment.IsDeleted = true;
                InMemoryDataService.UpdateTaskComment(taskComment);
                return true;
            }
            return false;
        }

        public async Task<IEnumerable<TaskComment>> GetTaskCommentsAsync(int taskId)
        {
            var comments = InMemoryDataService.GetTaskComments()
                .Where(tc => tc.TaskId == taskId && !tc.IsDeleted)
                .OrderBy(tc => tc.CreatedAt)
                .ToList();

            // Load users and replies
            var users = InMemoryDataService.GetUsers().ToList();
            var allComments = InMemoryDataService.GetTaskComments().Where(tc => !tc.IsDeleted).ToList();

            foreach (var comment in comments)
            {
                comment.User = users.FirstOrDefault(u => u.Id == comment.UserId);
                comment.Replies = allComments
                    .Where(c => c.ParentCommentId == comment.Id)
                    .ToList();

                // Load user info for replies
                foreach (var reply in comment.Replies)
                {
                    reply.User = users.FirstOrDefault(u => u.Id == reply.UserId);
                }
            }

            return await Task.FromResult(comments);
        }

        public async Task<IEnumerable<TaskComment>> GetUserCommentsAsync(int userId)
        {
            var comments = InMemoryDataService.GetTaskComments()
                .Where(tc => tc.UserId == userId && !tc.IsDeleted)
                .OrderByDescending(tc => tc.CreatedAt)
                .ToList();

            // Load tasks
            var tasks = InMemoryDataService.GetTasks().ToList();
            foreach (var comment in comments)
            {
                comment.Task = tasks.FirstOrDefault(t => t.Id == comment.TaskId);
            }

            return await Task.FromResult(comments);
        }

        public async Task<TaskComment?> GetCommentWithRepliesAsync(int commentId)
        {
            var comment = InMemoryDataService.GetTaskComment(commentId);
            if (comment == null || comment.IsDeleted) return null;

            // Load user
            var users = InMemoryDataService.GetUsers().ToList();
            comment.User = users.FirstOrDefault(u => u.Id == comment.UserId);

            // Load replies
            var allComments = InMemoryDataService.GetTaskComments().Where(tc => !tc.IsDeleted).ToList();
            comment.Replies = allComments
                .Where(c => c.ParentCommentId == commentId)
                .ToList();

            // Load user info for replies
            foreach (var reply in comment.Replies)
            {
                reply.User = users.FirstOrDefault(u => u.Id == reply.UserId);
            }

            return await Task.FromResult(comment);
        }

        public async Task<IEnumerable<TaskComment>> GetCommentRepliesAsync(int parentCommentId)
        {
            var replies = InMemoryDataService.GetTaskComments()
                .Where(tc => tc.ParentCommentId == parentCommentId && !tc.IsDeleted)
                .OrderBy(tc => tc.CreatedAt)
                .ToList();

            // Load users
            var users = InMemoryDataService.GetUsers().ToList();
            foreach (var reply in replies)
            {
                reply.User = users.FirstOrDefault(u => u.Id == reply.UserId);
            }

            return await Task.FromResult(replies);
        }
    }
}