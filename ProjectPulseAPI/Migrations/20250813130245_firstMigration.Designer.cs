// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectPulseAPI.Infrastructure;

#nullable disable

namespace ProjectPulseAPI.Migrations
{
    [DbContext(typeof(ProjectPulseDbContext))]
    [Migration("20250813130245_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "IsRead", "IsDeleted");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectManagerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId", "IsDeleted");

                    b.HasIndex("Status", "IsDeleted");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualCost = 15000m,
                            Budget = 50000m,
                            Color = "#3B82F6",
                            CreatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6463),
                            CreatedBy = "System",
                            Description = "Development of the ProjectPulse project management system",
                            EndDate = new DateTime(2025, 11, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "ProjectPulse Development",
                            Priority = 3,
                            ProjectManagerId = 2,
                            StartDate = new DateTime(2025, 8, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6464),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.ProjectActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "CreatedAt", "IsDeleted");

                    b.ToTable("ProjectActivities");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectId", "UserId")
                        .IsUnique();

                    b.ToTable("ProjectMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6523),
                            CreatedBy = "System",
                            IsActive = true,
                            JoinedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6522),
                            ProjectId = 1,
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6524),
                            UpdatedBy = "System",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6529),
                            CreatedBy = "System",
                            IsActive = true,
                            JoinedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6528),
                            ProjectId = 1,
                            Role = 3,
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6529),
                            UpdatedBy = "System",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.TaskComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskComments");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.TaskFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UploadedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UploadedBy");

                    b.ToTable("TaskFiles");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Files")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Email", "IsDeleted");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 13, 13, 2, 41, 161, DateTimeKind.Utc).AddTicks(1066),
                            CreatedBy = "System",
                            Email = "admin@projectpulse.com",
                            FirstName = "System",
                            IsActive = true,
                            LastLoginAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Administrator",
                            PasswordHash = "$2a$12$sgl3.yB/rRdoTpTVzfha9.9cTM2YGAebZFzl0GUNuj4h46RCKjWCS",
                            PhoneNumber = "",
                            ProfileImageUrl = "",
                            Role = 1,
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 41, 161, DateTimeKind.Utc).AddTicks(1074),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 13, 13, 2, 41, 588, DateTimeKind.Utc).AddTicks(8723),
                            CreatedBy = "System",
                            Email = "manager@projectpulse.com",
                            FirstName = "Project",
                            IsActive = true,
                            LastLoginAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Manager",
                            PasswordHash = "$2a$12$B0LiTzQv/CIVIblJGNfLPulu0.mHYdGXXYiX0KdBHyg7Vc4Vs15ka",
                            PhoneNumber = "",
                            ProfileImageUrl = "",
                            Role = 2,
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 41, 588, DateTimeKind.Utc).AddTicks(8737),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(4361),
                            CreatedBy = "System",
                            Email = "member@projectpulse.com",
                            FirstName = "Team",
                            IsActive = true,
                            LastLoginAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Member",
                            PasswordHash = "$2a$12$W8UZLCk5kph6aYgrsJOK9eiCdPMshSrjQdxeWSocXqXH7ANtKEFwK",
                            PhoneNumber = "",
                            ProfileImageUrl = "",
                            Role = 3,
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(4372),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualHours")
                        .HasColumnType("integer");

                    b.Property<int>("AssignedToId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstimatedHours")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<decimal>("Progress")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("AssignedToId", "Status", "IsDeleted");

                    b.HasIndex("DueDate", "Status", "IsDeleted");

                    b.HasIndex("ProjectId", "Status", "IsDeleted");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualHours = 6,
                            AssignedToId = 3,
                            CreatedAt = new DateTime(2025, 8, 3, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6621),
                            CreatedBy = "System",
                            Description = "Create the initial project structure and configure the development environment",
                            DueDate = new DateTime(2025, 8, 8, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6606),
                            EstimatedHours = 8,
                            Priority = 3,
                            Progress = 100m,
                            ProjectId = 1,
                            Status = 4,
                            Tags = "",
                            Title = "Setup Project Structure",
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6622),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 2,
                            ActualHours = 8,
                            AssignedToId = 3,
                            CreatedAt = new DateTime(2025, 8, 5, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6629),
                            CreatedBy = "System",
                            Description = "Develop JWT-based authentication system with role-based access control",
                            DueDate = new DateTime(2025, 8, 16, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6626),
                            EstimatedHours = 16,
                            Priority = 3,
                            Progress = 60m,
                            ProjectId = 1,
                            Status = 2,
                            Tags = "",
                            Title = "Implement User Authentication",
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6630),
                            UpdatedBy = "System"
                        },
                        new
                        {
                            Id = 3,
                            ActualHours = 10,
                            AssignedToId = 2,
                            CreatedAt = new DateTime(2025, 8, 6, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6635),
                            CreatedBy = "System",
                            Description = "Create comprehensive database schema for project management system",
                            DueDate = new DateTime(2025, 8, 18, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6633),
                            EstimatedHours = 12,
                            Priority = 2,
                            Progress = 90m,
                            ProjectId = 1,
                            Status = 3,
                            Tags = "",
                            Title = "Design Database Schema",
                            UpdatedAt = new DateTime(2025, 8, 13, 13, 2, 42, 42, DateTimeKind.Utc).AddTicks(6636),
                            UpdatedBy = "System"
                        });
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.Notification", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.Project", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "ProjectManager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.ProjectActivity", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.ProjectFile", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.Project", "Project")
                        .WithMany("Files")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.ProjectMember", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.TaskComment", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.TaskComment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPulseAPI.Core.Entities.UserTask", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "User")
                        .WithMany("TaskComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.TaskFile", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.UserTask", "Task")
                        .WithMany("Files")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "UploadedByUser")
                        .WithMany()
                        .HasForeignKey("UploadedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.UserTask", b =>
                {
                    b.HasOne("ProjectPulseAPI.Core.Entities.User", "AssignedTo")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectPulseAPI.Core.Entities.UserTask", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ProjectPulseAPI.Core.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Files");

                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.TaskComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.User", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("ManagedProjects");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("TaskComments");
                });

            modelBuilder.Entity("ProjectPulseAPI.Core.Entities.UserTask", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("SubTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
